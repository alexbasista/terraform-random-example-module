# .github/workflows/release.yaml
name: Terraform Module Version Release

on:
  push:
    branches: [main]
    paths:
      - 'VERSION'

permissions:
  contents: write

jobs:
  release:
    name: Tag and release new module version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from file
        id: read_version
        run: |
          TARGET_VERSION=$(cat VERSION)
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "Found target version: $TARGET_VERSION"

      - name: Check if tag already exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.read_version.outputs.target_version }}" >/dev/null 2>&1; then
            echo "Tag already exists. Skipping release."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: (PLACEHOLDER) Check if version already exists in registry
        id: registry_check
        run: |
          echo "Calling Terraform Registry API to check if version exists..."

      - name: Create and push Git tag
        if: steps.tag_check.outputs.skip == 'false'
        run: |
          echo "Creating and pushing tag v${{ steps.read_version.outputs.target_version }}."
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "v${{ steps.read_version.outputs.target_version }}"
          git push origin "v${{ steps.read_version.outputs.target_version }}"

      # Optional: Replace this with actual module publish logic if needed
      - name: (PLACEHOLDER) Publish to Terraform Registry
        if: steps.tag_check.outputs.skip == 'false'
        run: |
          echo "Publishing version v${{ steps.read_version.outputs.target_version }}..."
          # Add your publish logic here
