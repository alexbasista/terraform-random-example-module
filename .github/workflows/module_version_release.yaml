# .github/workflows/module_version_release.yml
name: Module Build and Release

on:
  pull_request:
    branches: [main]
    paths: [versions.txt]
  workflow_dispatch:

env:
  TF_VERSION: 1.12.2

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        test_dir: [tests/default]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (Test)
        run: terraform -chdir=${{ matrix.test_dir }} init

      - name: Terraform Plan (Test)
        run: terraform -chdir=${{ matrix.test_dir }} plan

      - name: Terraform Apply (Test)
        run: terraform -chdir=${{ matrix.test_dir }} apply -auto-approve

      - name: Terraform Destroy (Test)
        if: always()
        run: terraform -chdir=${{ matrix.test_dir }} destroy -auto-approve

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from versions.txt
        id: version
        run: |
          VERSION=$(cat versions.txt | tr -d '\n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag-check
        run: |
          if git tag | grep -q "^v${{ steps.version.outputs.version }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag and release
        if: steps.tag-check.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "Release v${{ steps.version.outputs.version }}"