# .github/workflows/ci.yaml
name: Terraform Module CI Testing

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - '*.tf'
      - 'tests/**/*.tf'
      - 'tests/**/*.tfvars'
      - 'tests/**/*.tftest.hcl'

permissions:
  contents: read
  pull-requests: write

env:
  LOCAL_TF_VERSION: "1.13.1"
  #TF_LINT_VERSION: "0.58.1"

jobs:
  ci-test:
    name: 'CI Test Pipeline'
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      UNIT_TEST_DIR: tests/unit
      INT_TEST_DIR: tests/integration
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.LOCAL_TF_VERSION }}

      - name: Print test details
        run: |
          echo "========================================="
          echo "üîÑ CI Test Pipeline"
          echo "========================================="
          echo "Phase 1: Unit tests (terraform test)"
          echo "üìÅ Unit test directory: ${{ env.UNIT_TEST_DIR }}"
          echo ""
          echo "Phase 2: Integration test (terraform plan + apply)"
          echo "üìÅ Integration test directory: ${{ env.INT_TEST_DIR }}"
          echo ""
          echo "üîß Local Terraform CLI version: ${{ env.LOCAL_TF_VERSION }}"
          echo "========================================="

      - name: Terraform Format Check
        run: |
          if ! terraform fmt -check -recursive; then
            echo "‚ùå Terraform files are not properly formatted!"
            echo "Run 'terraform fmt -recursive' to fix formatting issues."
            echo "Files that need formatting:"
            terraform fmt -check -recursive -diff
            exit 1
          fi

      # - name: Setup TFLint
      #   uses: terraform-linters/setup-tflint@v5
      #   with:
      #     tflint_version: ${{ env.TF_LINT_VERSION }}

      # - name: Run TFLint
      #   run: |
      #     tflint --init
      #     tflint --chdir=.
      #     tflint --chdir=tests/integration-test

      - name: Terraform Test (unit test)
        run: |
          echo "Running `terraform test` against ${{ env.UNIT_TEST_DIR }} directory..."
          terraform init
          terraform test -test-directory=${{ env.UNIT_TEST_DIR }}
      
      - name: Terraform Validate
        run: |
          echo "Running `terraform validate` against ${{ env.INT_TEST_DIR }} directory..."
          terraform -chdir=${{ env.INT_TEST_DIR }} init -backend=false
          terraform -chdir=${{ env.INT_TEST_DIR }} validate

      - name: Terraform Init + Plan + Apply
        id: terraform-init-plan-apply
        run: |
          echo "Running `terraform init` and `terraform plan` against ${{ env.INT_TEST_DIR }} directory..."
          terraform -chdir=${{ env.INT_TEST_DIR }} init -input=false
          terraform -chdir=${{ env.INT_TEST_DIR }} plan -input=false -out=tfplan

          resource_changes=$(terraform -chdir=${{ env.INT_TEST_DIR }} show -json tfplan \
            | jq -r '[.resource_changes[]? | select(.change.actions != ["no-op"])] | length')

          if [ "$resource_changes" -gt 0 ]; then
            terraform -chdir=${{ env.INT_TEST_DIR }} apply -input=false tfplan
          else
            echo "No resource changes; skipping apply."
          fi
      
      - name: Terraform Destroy
        if: steps.terraform-init-plan-apply.conclusion != 'skipped'
        run: |
          echo "Running `terraform destroy` against ${{ env.INT_TEST_DIR }} directory ..."
          terraform -chdir=${{ env.INT_TEST_DIR }} init -input=false
          terraform -chdir=${{ env.INT_TEST_DIR }} plan -destroy -out=tfplan-destroy -input=false
          terraform -chdir=${{ env.INT_TEST_DIR }} apply -auto-approve -input=false tfplan-destroy