# .github/workflows/ci_testing.yaml
name: Terraform Module CI Test

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - '*.tf'
      - 'tests/**/*.tf'
      - 'tests/**/*.tfvars'
      - 'VERSION'

permissions:
  contents: read
  pull-requests: write

env:
  LOCAL_TF_VERSION: "1.12.2"

jobs:
# -------------------------------------
# Job: Discover semantic version tags
# -------------------------------------
  discover-tags:
    name: Discover semantic version tags
    runs-on: ubuntu-latest
    env:
      INCLUDE_PREVIOUS_MAJOR_VERSION: true # set to false to skip N-1 major version test
    outputs:
      has_tags: ${{ steps.get-tags.outputs.has_tags }}
      tags: ${{ steps.get-tags.outputs.tags }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest semver tags
        id: get-tags
        shell: bash
        run: |
          set -e
          git fetch --tags
          tags=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | grep -Ev -- '-' || true)
          if [ -z "$tags" ]; then
            echo "No semantic version tags found. Skipping upgrade test."
            echo "tags<<EOF" >> $GITHUB_OUTPUT
            echo "[]" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_tags=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          sorted_tags=$(echo "$tags" | sort -V)
          major_versions=$(echo "$sorted_tags" | sed -E 's/^v([0-9]+)\..*/\1/' | sort -nr | uniq)
          current_major=$(echo "$major_versions" | head -n1 || true)
          prev_major=$(echo "$major_versions" | sed -n 2p || true)
          latest_tag=""
          prev_major_tag=""
          if [ -n "$current_major" ]; then
            latest_tag=$(echo "$sorted_tags" | grep "^v${current_major}\." | tail -n1 || true)
          fi
          if [ -n "$prev_major" ]; then
            prev_major_tag=$(echo "$sorted_tags" | grep "^v${prev_major}\." | tail -n1 || true)
          fi
          arr=()
          [ -n "$latest_tag" ] && arr+=("$latest_tag")
          if [[ "${INCLUDE_PREVIOUS_MAJOR_VERSION}" == "true" ]]; then
            [ -n "$prev_major_tag" ] && arr+=("$prev_major_tag")
          fi
          arr_json=$(printf '%s\n' "${arr[@]}" | jq -R . | jq -s -c .)
          echo "has_tags=true" >> $GITHUB_OUTPUT
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "${arr_json}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Discovered tags: ${arr_json}"

# -------------------------------------
# Job: Upgrade test for each version
# -------------------------------------
  upgrade-test:
    name: 'Upgrade test from: ${{ matrix.upgrade_from_version }}'
    needs: discover-tags
    if: needs.discover-tags.outputs.has_tags == 'true'
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      TEST_DIR: integration-test
    strategy:
      fail-fast: false
      max-parallel: 1  # Sequential execution since all jobs target the same TFC workspace
      matrix:
        upgrade_from_version: ${{ fromJson(needs.discover-tags.outputs.tags) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.LOCAL_TF_VERSION }}

      - name: Print test details
        run: |
          echo "========================================="
          echo "🚀 TERRAFORM MODULE UPGRADE TEST"
          echo "========================================="
          echo "📦 Upgrade from: ${{ matrix.upgrade_from_version }}"
          echo "📁 Test directory: ${{ env.TEST_DIR }}"
          echo "🔧 Terraform version: ${{ env.LOCAL_TF_VERSION }} (ensure your remote workspace is configured accordingly)"
          echo "========================================="
      
      - name: Checkout baseline module version (upgrade_from)
        run: |
          BASELINE_DIR="baseline-${{ matrix.upgrade_from_version }}"
          git clone . "$BASELINE_DIR"
          cd "$BASELINE_DIR"
          git checkout "${{ matrix.upgrade_from_version }}"
          ls -l

      - name: Update module source to baseline version
        run: |
          BASELINE_DIR="baseline-${{ matrix.upgrade_from_version }}"
          sed -i 's|source = .*|source = "git::https://github.com/${{ github.repository }}.git//.?ref=${{ matrix.upgrade_from_version }}"|' "$BASELINE_DIR/tests/${{ env.TEST_DIR }}/main.tf"

      - name: Terraform Init + Apply baseline version
        run: |
          BASELINE_DIR="baseline-${{ matrix.upgrade_from_version }}"
          cat "$BASELINE_DIR/tests/${{ env.TEST_DIR }}/main.tf"
          terraform -chdir="$BASELINE_DIR/tests/${{ env.TEST_DIR }}" init -input=false
          terraform -chdir="$BASELINE_DIR/tests/${{ env.TEST_DIR }}" apply -auto-approve

      - name: Switch to local module source (current branch)
        run: |
          sed -i 's|source = .*|source = "../.."|' tests/${{ env.TEST_DIR }}/main.tf

      - name: Terraform Init + Plan target version
        id: plan_target_version
        run: |
          terraform -chdir=tests/${{ env.TEST_DIR }} init -upgrade -input=false
          terraform -chdir=tests/${{ env.TEST_DIR }} plan -detailed-exitcode -input=false -out=tfplan || exit_code=$?
          echo "exit_code=${exit_code:-0}" >> "$GITHUB_OUTPUT"

      - name: Save Terraform Plan Output
        run: |
          terraform -chdir=tests/${{ env.TEST_DIR }} show -no-color tfplan > plan.txt

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan (Upgrade Test from \`${{ matrix.upgrade_from_version }}\`)\n\`\`\`\n${plan}\n\`\`\``
            });

      - name: Terraform Apply target version
        if: steps.plan_target_version.outputs.exit_code == '2'
        run: |
          terraform -chdir=tests/${{ env.TEST_DIR }} apply -input=false tfplan

      - name: Terraform Destroy
        if: always()
        run: |
          terraform -chdir=tests/${{ env.TEST_DIR }} destroy -auto-approve