# .github/workflows/terraform-upgrade-test.yml
name: Terraform Module Upgrade Test

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - 'tests/**'
      - 'examples/**'
  # push:
  #   branches:
  #     - main

jobs:
  discover-tags:
    runs-on: ubuntu-latest
    env:
      INCLUDE_PREVIOUS_MAJOR: true # set to false to skip N-1 major version test
    outputs:
      tags: ${{ steps.get-tags.outputs.tags }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest semver tags
        id: get-tags
        shell: bash
        run: |
          set -e
          git fetch --tags
          tags=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | grep -Ev -- '-')
          sorted_tags=$(echo "$tags" | sort -V)
          major_versions=$(echo "$sorted_tags" | sed -E 's/^v([0-9]+)\..*/\1/' | sort -nr | uniq)
          current_major=$(echo "$major_versions" | head -n1 || true)
          prev_major=$(echo "$major_versions" | sed -n 2p || true)
          latest_tag=""
          prev_major_tag=""
          if [ -n "$current_major" ]; then
            latest_tag=$(echo "$sorted_tags" | grep "^v${current_major}\." | tail -n1 || true)
          fi
          if [ -n "$prev_major" ]; then
            prev_major_tag=$(echo "$sorted_tags" | grep "^v${prev_major}\." | tail -n1 || true)
          fi
          arr=()
          [ -n "$latest_tag" ] && arr+=("$latest_tag")
          if [[ "${INCLUDE_PREVIOUS_MAJOR}" == "true" ]]; then
            [ -n "$prev_major_tag" ] && arr+=("$prev_major_tag")
          fi
          arr_json=$(printf '%s\n' "${arr[@]}" | jq -R . | jq -s -c .)
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "${arr_json}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Print discovered tags
        run: |
          echo "Discovered tags: ${{ steps.get-tags.outputs.tags }}"

  upgrade-test:
    needs: discover-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        upgrade_from: ${{ fromJson(needs.discover-tags.outputs.tags) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Print upgrade source
        run: echo "Testing upgrade from ${{ matrix.upgrade_from }}"
      
      - name: Use released module version
        run: |
          sed -i 's|__MODULE_SOURCE__|git::https://github.com/${{ github.repository }}.git//.?ref=${{ matrix.upgrade_from }}|' tests/default/main.tf

      - name: Terraform Init + Apply (release)
        run: |
          terraform -chdir=tests/default init -input=false
          terraform -chdir=tests/default apply -auto-approve

      - name: Switch to local module source (upgrade test)
        run: |
          sed -i 's|source = .*|source = "../.."|' tests/default/main.tf

      - name: Terraform Init + Plan (upgrade test)
        run: |
          terraform -chdir=tests/default init -upgrade -input=false
          terraform -chdir=tests/default plan -detailed-exitcode -input=false -out=tfplan

      - name: Save Terraform Plan Output
        run: terraform -chdir=tests/default show -no-color tfplan > plan.txt

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan (Upgrade Test from \`${{ matrix.upgrade_from }}\`)\n\`\`\`\n${plan}\n\`\`\``
            });

      - name: Terraform Apply (upgrade test)
        run: |
          terraform -chdir=tests/default apply -input=false tfplan

      - name: Terraform Destroy
        if: always()
        run: |
          terraform -chdir=tests/default destroy -auto-approve