# .github/workflows/terraform-upgrade-test.yml
name: Terraform Module Upgrade Test

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - 'tests/**'
      - 'examples/**'
  # push:
  #   branches:
  #     - main

jobs:
  upgrade-test:
    name: Upgrade Test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history and tags

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
      
      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags

          # List tags matching vMAJOR.MINOR.PATCH (no pre-release)
          tags=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | grep -Ev -- '-')

          # Sort tags using version sort, newest last
          sorted_tags=$(echo "$tags" | sort -V)

          # Get latest tag (current major)
          latest_tag=$(echo "$sorted_tags" | tail -n1)

          # Get all major versions, sorted descending
          majors=$(echo "$sorted_tags" | sed -E 's/^v([0-9]+)\..*/\1/' | sort -nr | uniq)

          # Get current and previous major
          current_major=$(echo "$majors" | head -n1)
          prev_major=$(echo "$majors" | sed -n 2p)

          # Get latest tag for previous major (if exists)
          prev_major_tag=$(echo "$sorted_tags" | grep "^v$prev_major\." | tail -n1 || echo "")

          echo "latest_tag=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "prev_major_tag=$prev_major_tag" >> "$GITHUB_OUTPUT"

      - name: Fail if no usable tag found
        if: steps.latest_tag.outputs.latest_tag == '' && steps.latest_tag.outputs.prev_major_tag == ''
        run: |
          echo "No semver tags found. Skipping upgrade test."
          exit 1

      - name: Print discovered tags
        run: |
          echo "Latest tag (current major): ${{ steps.latest_tag.outputs.latest_tag }}"
          echo "Latest tag (previous major): ${{ steps.latest_tag.outputs.prev_major_tag }}"

      - name: Use latest released module version
        run: |
          sed -i 's|__MODULE_SOURCE__|git::https://github.com/${{ github.repository }}.git//.?ref=${{ steps.latest_tag.outputs.tag }}|' tests/default/main.tf

      - name: Terraform Init + Apply (current latest release)
        run: |
          terraform -chdir=tests/default init -input=false
          terraform -chdir=tests/default apply -auto-approve

      - name: Switch to local module source (upgrade test)
        run: |
          sed -i 's|source = .*|source = "../.."|' tests/default/main.tf

      - name: Terraform Init + Plan (upgrade test)
        run: |
          terraform -chdir=tests/default init -upgrade -input=false
          terraform -chdir=tests/default plan -detailed-exitcode -input=false -out=tfplan

      - name: Save Terraform Plan Output
        run: terraform -chdir=tests/default show -no-color tfplan > plan.txt

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan (Upgrade Test)\n\`\`\`\n${plan}\n\`\`\``
            });

      - name: Terraform Apply (upgrade test)
        run: |
          terraform -chdir=tests/default apply -input=false tfplan

      - name: Terraform Destroy
        if: always()
        run: |
          terraform -chdir=tests/default destroy -auto-approve